day 1.

learn segmented mode asm programming is dos environment 
this will give as an ability to move to protected mode from real mode

we can use only low part of intr service routine and fill high part with zeroes
low part can be used literally and placed in .short size storage

GDT should be aligned on 8 byte boundary
IDT should be also aligned on 8 byte

the next step is to add C startup routine which will display message on the screen
also, may be rodata section should be added to linker script to hold C constants

various objdump use cases

objdump -x (display all available header information)
objdump -x -S (with disassembly)

next steps

1. bootloader: we will use copy.sh hosted freedos, after that i'll grab the image and reformat it using floppy utility and make filesystem on it
after making filesystem i'll copy binary image and check fat contents. if it's simple enough i'll try to write the simplest possible loader 
which use 512 byte buffer to load image on 32k boundary

2. simplify system code, drop unnecessary strlen calls and don't use line increments. just keep current screen buffer counter

floppy disk image file can be created using the following command

# mkdosfs -n TCOS -C tcos.img -S 512 720

after switching to protected mode it can be necessary to use floppy disk controller
extensive documentation about floppy disk controller programming can be found by keyword 3F0h floppy disk controller

not bad resource is the http://www.isdaman.com/alsos/hardware/fdc/floppy.htm

also book Microprocessors, PC Hardware and interfacing contains useful information abount FDC/IDE programming

we should check offsets in generated binary and place far jump at the and of data section and then jump to it after init code completion
this also means that we need to patch mbr start jump with fixed offset

in ISRs assigned to interrupts with error code, handler should remove error from stack before returning
